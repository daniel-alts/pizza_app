node_modules
.env



created_at: Date,
  state: { type: Number, default: 1 },
  total_price: Number,
  items: [{
    name: String,
    price: Number,
    size: { type: String, enum: ['m', 's', 'l']},
    quantity: Number,
  }]




  
// app.get('/', (req, res) => {
//     return res.json({ status: true })
// })


// app.post('/order', async (req, res) => {
//     const body = req.body;

    // const total_price = body.items.reduce((prev, curr) => {
    //     prev += curr.price
    //     return prev
    // }, 0);

//     const order = await orderModel.create({ 
//         items: body.items,
//         created_at: moment().toDate(),
//         total_price
//     })
    
//     return res.json({ status: true, order })
// })

// app.get('/order/:orderId', async (req, res) => {
//     const { orderId } = req.params;
//     const order = await orderModel.findById(orderId)

    // if (!order) {
    //     return res.status(404).json({ status: false, order: null })
    // }

//     return res.json({ status: true, order })
// })

// app.get('/orders', async (req, res) => {
//     const orders = await orderModel.find()

//     return res.json({ status: true, orders })
// })

// app.patch('/order/:id', async (req, res) => {
//     const { id } = req.params;
//     const { state } = req.body;

//     const order = await orderModel.findById(id)

//     if (!order) {
//         return res.status(404).json({ status: false, order: null })
//     }

//     if (state < order.state) {
//         return res.status(422).json({ status: false, order: null, message: 'Invalid operation' })
//     }

//     order.state = state;

//     await order.save()

//     return res.json({ status: true, order })
// // })

// app.delete('/order/:id', async (req, res) => {
//     const { id } = req.params;

//     const order = await orderModel.deleteOne({ _id: id})

//     return res.json({ status: true, order })
//})


// mongoose.connect('mongodb://localhost:27017')

// mongoose.connection.on("connected", () => {
// 	console.log("Connected to MongoDB Successfully");
// });

// mongoose.connection.on("error", (err) => {
// 	console.log("An error occurred while connecting to MongoDB");
// 	console.log(err);
// });




orderRoute.get("/", authenticateUser, (req, res) => {
  const {limit, page, sortby, order="asc"} = req.query

  order === "desc"? orderIndex = -1 : orderIndex = 1
  const skip = (page-1) * limit

  if (sortby == "price") {
    orderModel.find().sort({ total_price: orderIndex }).limit(limit).skip(skip)
      .then((orders) => {
        return res.status(200).send(orders);
      }).catch((err) => {
        console.log(err);
        res.status(500).send(err.message);
      });
  }

  if (sortby == "date") {
    orderModel.find().sort({ createdAt: orderIndex }).limit(limit).skip(skip)
      .then((orders) => {
        return res.status(200).send(orders);
      }).catch((err) => {
        console.log(err);
        res.status(500).send(err.message);
      });
  }

  if (sortby == "state") {
    orderModel.find().sort({ state: orderIndex }).limit(limit).skip(skip)
      .then((orders) => {
        return res.status(200).send(orders);
      }).catch((err) => {
        console.log(err);
        res.status(500).send(err.message);
      });
  } else {
    orderModel.find()
      .then((orders) => {
        return res.status(200).send(orders);
      }).catch((err) => {
        console.log(err);
        res.status(500).send(err.message);
      });
  }
     
})


const express = require("express");
const { connectToMongoDB1 } = require("./dbuser");
const userRoute = require("./routes/user");

require("dotenv").config();

const PORT = process.env.PORT;

const app = express();

// connect to Mongodb server
connectToMongoDB1();

app.use(express.json());

app.use("/users", userRoute);

app.get("/", (req, res) => {
  res.send("Welcome home");
});

app.listen(PORT, () => {
  console.log(`server started on PORT: http://localhost:${PORT}`);
});


const mongoose = require("mongoose");
require("dotenv").config();

const MONGO_DB_CONNECTION_URL = process.env.MONGO_DB_CONNECTION_URL;

function connectToMongoDB1() {
  mongoose.connect(MONGO_DB_CONNECTION_URL);

  mongoose.connection.on("connected", () => {
    console.log("connected to MongoDB successfully");
  });

  mongoose.connection.on("error", (err) => {
    console.log(err);
    console.log("An error occured");
  });
}

module.exports = { connectToMongoDB1 };